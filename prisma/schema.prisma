// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  DELIVERYMAN
  ADMINISTRATOR
}

model User {
  id        String    @id @default(uuid())
  name      String
  password  String
  document  String    @unique
  role      Role      @default(DELIVERYMAN)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  addressId String?   @map("address_id")

  address Address? @relation(fields: [addressId], references: [id], onDelete: Cascade)
  Order   Order[]

  @@map("users")
}

model Address {
  id        String  @id @default(uuid())
  street    String
  city      String
  state     String
  zipCode   String
  latitude  Decimal
  longitude Decimal

  user      User[]
  Recipient Recipient[]

  @@map("address")
}

model Recipient {
  id           String         @id @default(uuid())
  name         String
  document     String
  addressId    String         @map("address_id")
  address      Address        @relation(fields: [addressId], references: [id], onDelete: Cascade)
  Order        Order[]
  createdAt    DateTime?      @default(now()) @map("created_at")
  updatedAt    DateTime?      @updatedAt @map("updated_at")
  Notification Notification[]

  @@map("recipients")
}

model Order {
  id             String    @id @default(uuid())
  recipientId    String    @map("recipient_id")
  deliveryStatus String
  collectedAt    DateTime? @map("collected_at")
  deliveredAt    DateTime? @map("delivered_at")
  returnedAt     DateTime? @map("returned_at")
  createdAt      DateTime? @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")
  deliverymanId  String?   @map("deliveryman_id")
  User           User?     @relation(fields: [deliverymanId], references: [id], onDelete: SetNull)
  recipient      Recipient @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  attachments Attachment[]
  @@map("orders")
}

model Notification {
  id          String    @id @default(uuid())
  recipient   Recipient @relation(fields: [recipientId], references: [id])
  recipientId String    @map("recipient_id")
  title       String
  content     String
  readAt      DateTime? @map("read_at")
  createdAt   DateTime? @default(now()) @map("created_at")

  @@map("notifications")
}

model Attachment {
  id String @id @default(uuid())
  title String
  url String
  orderId String? @map("order_id")
  order Order? @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("attachments")
}
